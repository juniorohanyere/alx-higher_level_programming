test case for a matrix division function

::
    matrix must be a list of integers or floats

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [
    ...     [0, 3, 6],
    ...     [9, 8, 7],
    ...     [15, 7, 1],
    ... ]
    >>> print(matrix_divided(matrix, 'a'))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: div must be a number

    >>> matrix = [
    ...     [a, 2, 3],
    ...     [2, 4, 6],
    ...     [9, 4, 1],
    ... ]
    Traceback (most recent call last):
      File "<stdin>", line 2, in <module>
    NameError: name 'a' is not defined

::
    each row of the matrix must be of the same size

    >>> matrix = [
    ...     [2, 3, 5, 7],
    ...     [0, 8, 3],
    ...     [15, 7, 1, 2],
    ... ]
    >>> print(matrix_divided(matrix, 4))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: Each row of the matrix must have the same size

::
    divisor can't be equal to 0

    >>> matrix = [
    ...     [3, 2, 1],
    ...     [0, 3, 6],
    ...     [9, 8, 7],
    ... ]
    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ZeroDivisionError: division by zero

::
    results of all the elements of the matrix divided by div are in 2dp

    >>> matrix = [
    ...     [0, 3, 6],
    ...     [15, 7, 1],
    ...     [9, 8, 7],
    ...     [3, 2, 1],
    ... ]
    >>> print(matrix_divided(matrix, 5))
    [[0.0, 0.6, 1.2], [3.0, 1.4, 0.2], [1.8, 1.6, 1.4], [0.6, 0.4, 0.2]]

    >>> print(matrix_divided(matrix, 6))
    [[0.0, 0.5, 1.0], [2.5, 1.17, 0.17], [1.5, 1.33, 1.17], [0.5, 0.33, 0.17]]
